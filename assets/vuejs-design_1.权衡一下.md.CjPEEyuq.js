import{_ as e,c as i,o as l,a7 as t}from"./chunks/framework.Ed-g3oaB.js";const c=JSON.parse('{"title":"权衡的艺术","description":"","frontmatter":{},"headers":[],"relativePath":"vuejs-design/1.权衡一下.md","filePath":"vuejs-design/1.权衡一下.md","lastUpdated":1745248918000}'),r={name:"vuejs-design/1.权衡一下.md"};function o(n,a,d,s,u,h){return l(),i("div",null,a[0]||(a[0]=[t('<h1 id="权衡的艺术" tabindex="-1">权衡的艺术 <a class="header-anchor" href="#权衡的艺术" aria-label="Permalink to &quot;权衡的艺术&quot;">​</a></h1><h2 id="命令式和生命式" tabindex="-1">命令式和生命式 <a class="header-anchor" href="#命令式和生命式" aria-label="Permalink to &quot;命令式和生命式&quot;">​</a></h2><p>命令式：关注过程 声明式：关注结果（封装了过程 内部实现命令式）</p><h2 id="性能与可维护性的权衡" tabindex="-1">性能与可维护性的权衡 <a class="header-anchor" href="#性能与可维护性的权衡" aria-label="Permalink to &quot;性能与可维护性的权衡&quot;">​</a></h2><p>结论：声明式代码的性能不优于命令式代码的性能</p><p>直接修改的性能消耗定义为 A，把找出差异的性能消耗定义为 B</p><ul><li>命令式代码的更新性能消耗 = A</li><li>声明式代码的更新性能消耗 = B + A 生命式代码的优势：在采用命令式代码开发的时候，我们需要维护实现目标的整个过程，包括要手动完成 DOM 元素的创建、更新、删除等工作。而声明式代码展示的就是我们要的结果，看上去更加直观</li></ul><p>框架的目标：在保持可维护性的同时让性能损失最小化</p><h2 id="虚拟dom的性能" tabindex="-1">虚拟dom的性能 <a class="header-anchor" href="#虚拟dom的性能" aria-label="Permalink to &quot;虚拟dom的性能&quot;">​</a></h2><p>声明式代码的更新性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗 目标：能够最小化找出差异的性能消耗，就可以让声明式代码的性能无限接近命令式代码的性能 性能方面：纯js层面的性能碾压dom操作</p><ul><li>创建 <ul><li>innerHTML：HTML 字符串拼接的计算量 + innerHTML 的 DOM 计算量。</li><li>虚拟dom：创建 JavaScript 对象的计算量 + 创建真实 DOM 的计算量。</li></ul></li><li>更新 <ul><li>innerHTML：重新构建 HTML 字符串，再重新设置 DOM 元素的 innerHTML 属性</li><li>虚拟dom：重新创建 JavaScript 对象（虚拟 DOM 树），然后比较新旧虚拟 DOM，找到变化的元素并更新它</li></ul></li></ul><h2 id="运行时和编译时" tabindex="-1">运行时和编译时 <a class="header-anchor" href="#运行时和编译时" aria-label="Permalink to &quot;运行时和编译时&quot;">​</a></h2><p>框架设计层面的运行时、编译时以及运行时 + 编译时<br> 一个框架既可以是纯运行时的，也可以是纯编译时的，还可以是既支持运行时又支持编译时的</p><ul><li>纯运行时：没有编译的过程，因此我们没办法分析用户提供的内容</li><li>编译步骤：可以分析用户提供的内容，看看哪些内容未来可能会改变，哪些内容永远不会改变</li><li>纯编译时：由于不需要任何运行时，而是直接编译成可执行的 JavaScript 代码，因此性能可能会更好，但是这种做法有损灵活性，即用户提供的内容必须编译后才能用</li></ul>',14)]))}const m=e(r,[["render",o]]);export{c as __pageData,m as default};
