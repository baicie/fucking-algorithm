import{_ as a,c as i,o as s,a7 as e}from"./chunks/framework.Bgb21v0T.js";const _=JSON.parse('{"title":"框架设计的核心要素","description":"","frontmatter":{},"headers":[],"relativePath":"vuejs-design/2.框架设计的核心要素.md","filePath":"vuejs-design/2.框架设计的核心要素.md","lastUpdated":1724338948000}'),t={name:"vuejs-design/2.框架设计的核心要素.md"},l=e(`<h1 id="框架设计的核心要素" tabindex="-1">框架设计的核心要素 <a class="header-anchor" href="#框架设计的核心要素" aria-label="Permalink to &quot;框架设计的核心要素&quot;">​</a></h1><h2 id="提升用户的开发体验" tabindex="-1">提升用户的开发体验 <a class="header-anchor" href="#提升用户的开发体验" aria-label="Permalink to &quot;提升用户的开发体验&quot;">​</a></h2><ul><li>warn：尽可能提供有用的信息 收集当前发生错误的组件栈信息</li><li>打印： initCustomFormatter</li></ul><h2 id="控制框架代码的体积" tabindex="-1">控制框架代码的体积 <a class="header-anchor" href="#控制框架代码的体积" aria-label="Permalink to &quot;控制框架代码的体积&quot;">​</a></h2><p>通过__DEV__常量做到在开发环境中为用户提供友好的警告信息的同时，不会增加生产环境代码的体积</p><h2 id="框架要做到良好的-tree-shaking" tabindex="-1">框架要做到良好的 Tree-Shaking <a class="header-anchor" href="#框架要做到良好的-tree-shaking" aria-label="Permalink to &quot;框架要做到良好的 Tree-Shaking&quot;">​</a></h2><ul><li>Tree-Shaking：指的就是消除那些永远不会被执行的代码，也就是排除 dead code</li><li>副作用：副作用就是，当调用函数的时候会对外部产生影响，例如修改了全局变量</li><li><code>/*#__PURE__*/</code>告诉bundler可以去除某些代码</li></ul><h2 id="框架应该输出怎样的构建产物" tabindex="-1">框架应该输出怎样的构建产物 <a class="header-anchor" href="#框架应该输出怎样的构建产物" aria-label="Permalink to &quot;框架应该输出怎样的构建产物&quot;">​</a></h2><p>为开发环境和生产环境输出不同的包 <code>vue.global.js</code> <code>vue.global.prod.js</code><br> 带有 -bundler 字样的 ESM 资源是给 rollup.js 或 webpack 等打包工具使用<br> 带有 -browser 字样的 ESM 资源是直接给 <code>&lt;script type=&quot;module&quot;&gt;</code> 使用的</p><ul><li>立即调用的函数表达式：直接在 HTML 页面中使用 <code>&lt;script&gt;</code> 标签引入框架并使用</li><li>esm：直接引用esm格式的资源<code>&lt;script type=&quot;module&quot;&gt;</code></li><li>cjs：服务端渲染 vuejs在nodejs环境中运行</li></ul><h2 id="特性开关" tabindex="-1">特性开关 <a class="header-anchor" href="#特性开关" aria-label="Permalink to &quot;特性开关&quot;">​</a></h2><p>为了兼容 Vue.js 2，在 Vue.js 3 中仍然可以使用选项 API 的方式编写代码。但是如果明确知道自己不会使用选项 API，用户就可以使用 <strong>VUE_OPTIONS_API</strong> 开关来关闭该特性，这样在打包的时候 Vue.js 的这部分代码就不会包含在最终的资源中，从而减小资源体积。</p><h2 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h2><p>框架错误处理机制的好坏直接决定了用户应用程序的健壮性，还决定了用户开发时处理错误的心智负担。</p><ul><li>用户自己处理：如果太多不好搞</li><li>代替用户统一处理错误：将错误处理封装为一个函数 进而用户可以使用它注册错误处理程序</li></ul><h2 id="良好的-typescript-类型支持" tabindex="-1">良好的 TypeScript 类型支持 <a class="header-anchor" href="#良好的-typescript-类型支持" aria-label="Permalink to &quot;良好的 TypeScript 类型支持&quot;">​</a></h2><p>ts为是 JavaScript 的超集，为 JavaScript 提供类型支持</p><p>类型推倒代码</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,19),n=[l];function r(h,p,o,d,c,k){return s(),i("div",null,n)}const g=a(t,[["render",r]]);export{_ as __pageData,g as default};
